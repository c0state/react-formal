{"componentChunkName":"component---node-modules-docpocalypse-gatsby-theme-src-templates-component-tsx","path":"/api/Form","result":{"data":{"docpocalypse":{"id":"e72e37ea-97e4-5114-80f4-a6b2af23997e","type":"component","name":"Form","packageName":"react-formal","importName":"import { Form } from 'react-formal'","tags":[{"name":"alias","value":"Form"}],"example":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"overview\"\n  }, \"Overview\"), mdx(\"p\", null, \"Form component renders a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \" to be updated and validated by child Fields.\\nForms can be thought of as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<input/>\"), \"s for complex values, or models. A Form aggregates\\na bunch of smaller inputs, each in charge of updating a small part of the overall model.\\nThe Form will integrate and validate each change and fire a single unified \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onChange\"), \" with the new \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \".\"), mdx(\"p\", null, \"Validation errors can be displayed anywhere inside a Form with Message Components.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import Form from \\\"@docs/components/FormWithResult\\\";\\nimport * as yup from \\\"yup\\\";\\n\\nconst defaultStr = yup.string().default(\\\"\\\");\\n\\nconst customerSchema = yup.object({\\n  name: yup.object({\\n    first: defaultStr.required(\\\"please enter a first name\\\"),\\n    last: defaultStr.required(\\\"please enter a surname\\\")\\n  }),\\n\\n  dateOfBirth: yup.date().max(new Date(), \\\"Are you a time traveler?!\\\"),\\n\\n  colorId: yup\\n    .number()\\n    .nullable()\\n    .required(\\\"Please select a dank color\\\")\\n});\\n\\n<Form schema={customerSchema} defaultValue={customerSchema.default()}>\\n  <fieldset>\\n    <legend className=\\\"sr-only\\\">name</legend>\\n    <label>\\n      Name\\n      <Form.Field name=\\\"name.first\\\" placeholder=\\\"First name\\\" />\\n    </label>\\n    <label>\\n      Surname\\n      <Form.Field name=\\\"name.last\\\" placeholder=\\\"Surname\\\" />\\n    </label>\\n    <Form.Message for={[\\\"name.first\\\", \\\"name.last\\\"]} className=\\\"error\\\" />\\n  </fieldset>\\n\\n  <label>\\n    Date of Birth\\n    <Form.Field name=\\\"dateOfBirth\\\" />\\n  </label>\\n  <Form.Message for=\\\"dateOfBirth\\\" className=\\\"error\\\" />\\n\\n  <label>\\n    Favorite Color\\n    <Form.Field name=\\\"colorId\\\" as=\\\"select\\\">\\n      <option value={null}>Select a color...</option>\\n      <option value={0}>Red</option>\\n      <option value={1}>Yellow</option>\\n      <option value={2}>Blue</option>\\n      <option value={3}>other</option>\\n    </Form.Field>\\n  </label>\\n  <Form.Message for=\\\"colorId\\\" className=\\\"error\\\" />\\n\\n  <Form.Submit type=\\\"submit\\\">Submit</Form.Submit>\\n</Form>;\\n\")), mdx(\"h2\", {\n    \"id\": \"schema\"\n  }, \"Schema\"), mdx(\"p\", null, \"A schema is not \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"strictly\"), \" required, however describing form data with a schema\\noffers many benefits that make their use worthwhile.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Schema provide an expressive language for describing validation at a\\nfield level as well as form-wide tests.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Schema provide type metadata that React Formal can use to simplify configuration.\\n\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"yup.array()\"), \" fields are automatically render \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<select multiple>\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"yup.boolean()\"), \"s\\nrender checkboxes, and so on\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Schema allow encapsulating server serialization and business logic apart\\nfrom your specific UI. Validation and transformations are not strictly tied to form input\\nlayout or UI means more maintainable, composable, and testable code.\")), mdx(\"h3\", {\n    \"id\": \"field-inference\"\n  }, \"Field Inference\"), mdx(\"p\", null, \"A Field's schema provides runtime type information that can be used to help\\nreduce boilerplate UI code. Field's will render the most appropriate native input\\nfor your field type (you can always override it).\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import Form from \\\"react-formal\\\";\\nimport * as yup from \\\"yup\\\";\\n\\nconst schema = yup.object({\\n  list: yup.array(),\\n  number: yup.number(),\\n  date: yup.date()\\n});\\n\\n<Form schema={schema}>\\n  <label>\\n    A list\\n    <Form.Field name=\\\"list\\\" />\\n  </label>\\n  <label>\\n    A number picker\\n    <Form.Field name=\\\"number\\\" />\\n  </label>\\n  <label>\\n    A date picker\\n    <Form.Field name=\\\"date\\\" />\\n  </label>\\n</Form>;\\n\")), mdx(\"h3\", {\n    \"id\": \"data-serialization\"\n  }, \"Data Serialization\"), mdx(\"p\", null, \"Schema can also do data sanitiation and transformation. When a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Form\"), \" is submitted\\nthe current value is passed through\\nthe schema a final time as a whole, the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"transformed\"), \" value is what is passed back\\nto the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#onSubmit\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"onSubmit\")), \" handlers (you can override this behavior with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"strict\"), \").\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\",\n    \"metastring\": \"renderAsComponent\",\n    \"renderAsComponent\": true\n  }), \"import * as yup from \\\"yup\\\";\\nimport Form from \\\"react-formal\\\";\\nimport Result from \\\"../components/Result\\\";\\n\\nconst [submittedValue, setSubmittedValue] = useState({});\\nconst schema = yup.object({\\n  slug: yup\\n    .string()\\n    .lowercase()\\n    .transform(value =>\\n      value\\n        .replace(/not/g, \\\"\\\")\\n        .trim()\\n        .replace(/\\\\s+/g, \\\"-\\\")\\n    )\\n});\\n\\n<Form\\n  schema={schema}\\n  defaultValue={{ slug: \\\"Not a Good Slug\\\" }}\\n  onSubmit={setSubmittedValue}\\n  className=\\\"lg:flex\\\"\\n>\\n  <div className=\\\"lg:flex-2\\\">\\n    <label>\\n      Slug (submit to see result)\\n      <Form.Field name=\\\"slug\\\" readOnly />\\n    </label>\\n    <Form.Submit type=\\\"submit\\\">Submit</Form.Submit>\\n  </div>\\n  <Result value={submittedValue} className=\\\"lg:ml-4 lg:mt-0\\\" />\\n</Form>;\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":""}},"composes":[],"props":[{"name":"value","tags":[],"defaultValue":null,"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Form value object, can be left \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/react-formal/controllables\"\n  }), \"uncontrolled\"), \";\\nuse the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"defaultValue\"), \" prop to initialize an uncontrolled form.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":"<p>Form value object, can be left <a href=\"/react-formal/controllables\">uncontrolled</a>;\nuse the <code>defaultValue</code> prop to initialize an uncontrolled form.</p>"}},"required":false,"tsType":{"name":"TValue"},"type":{"name":"object","value":null,"raw":null}},{"name":"onChange","tags":[],"defaultValue":null,"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Callback that is called when the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \" prop changes.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"static\",\n    \"static\": true\n  }), \"function (\\n  value: any,\\n  updatedPaths: string[]\\n)\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":"<p>Callback that is called when the <code>value</code> prop changes.</p>\n<pre><code class=\"language-ts\" data-meta=\"static\">function (\n  value: any,\n  updatedPaths: string[]\n)\n</code></pre>"}},"required":false,"tsType":{"name":"signature","type":"function","raw":"(input: TValue, changedPaths: string[]) => void","signature":{"arguments":[{"name":"input","type":{"name":"TValue"}},{"name":"changedPaths","type":{"name":"Array","elements":[{"name":"string"}],"raw":"string[]"}}],"return":{"name":"void"}}},"type":{"name":"func","value":null,"raw":null}},{"name":"errors","tags":[],"defaultValue":null,"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"An object hash of field errors for the form. The object should be keyed with paths\\nwith the values being an array of errors or message objects. Errors can be\\nleft \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/react-formal/controllables\"\n  }), \"uncontrolled\"), \" (use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"defaultErrors\"), \" to set an initial value)\\nor managed along with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onError\"), \" callback. You can use any object shape you'd like for\\nerrors, as long as you provide the Form.Message component an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"extract\"), \" prop that\\nunderstands how to pull out the strings message. By default it understands strings and objects\\nwith a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"'message'\"), \" property.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"static\",\n    \"static\": true\n  }), \"<Form errors={{\\n \\\"name.first\\\": [\\n   'First names are required',\\n   {\\n    message: \\\"Names must be at least 2 characters long\\\",\\n    type: 'min'\\n   }\\n ],\\n}}/>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":"<p>An object hash of field errors for the form. The object should be keyed with paths\nwith the values being an array of errors or message objects. Errors can be\nleft <a href=\"/react-formal/controllables\">uncontrolled</a> (use <code>defaultErrors</code> to set an initial value)\nor managed along with the <code>onError</code> callback. You can use any object shape you'd like for\nerrors, as long as you provide the Form.Message component an <code>extract</code> prop that\nunderstands how to pull out the strings message. By default it understands strings and objects\nwith a <code>'message'</code> property.</p>\n<pre><code class=\"language-jsx\" data-meta=\"static\">&#x3C;Form errors={{\n \"name.first\": [\n   'First names are required',\n   {\n    message: \"Names must be at least 2 characters long\",\n    type: 'min'\n   }\n ],\n}}/>\n</code></pre>"}},"required":false,"tsType":{"name":"Errors"},"type":{"name":"object","value":null,"raw":null}},{"name":"onError","tags":[],"defaultValue":null,"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Callback that is called when a validation error occurs. It is called with an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"errors\"), \" object\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"renderAsComponent\",\n    \"renderAsComponent\": true\n  }), \"import Form from '@docs/components/FormWithResult';\\nimport * as yup from 'yup'\\n\\nconst schema = yup.object({\\n  name: yup.string().required().min(15)\\n})\\n\\nconst [errors, setErrors] = useState({});\\n\\n<Form\\n  schema={schema}\\n  errors={errors}\\n  onError={errors => {\\n    if (errors.name) {\\n      errors.name = 'hijacked!'\\n    }\\n\\n    setErrors(errors)\\n}}>\\n   <label>\\n     Name\\n     <Form.Field name='name'/>\\n   </label>\\n  <Form.Message for='name' className=\\\"error\\\" />\\n\\n  <Form.Submit type='submit'>Submit</Form.Submit>\\n</Form>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":"<p>Callback that is called when a validation error occurs. It is called with an <code>errors</code> object</p>\n<pre><code class=\"language-jsx\" data-meta=\"renderAsComponent\">import Form from '@docs/components/FormWithResult';\nimport * as yup from 'yup'\n\nconst schema = yup.object({\n  name: yup.string().required().min(15)\n})\n\nconst [errors, setErrors] = useState({});\n\n&#x3C;Form\n  schema={schema}\n  errors={errors}\n  onError={errors => {\n    if (errors.name) {\n      errors.name = 'hijacked!'\n    }\n\n    setErrors(errors)\n}}>\n   &#x3C;label>\n     Name\n     &#x3C;Form.Field name='name'/>\n   &#x3C;/label>\n  &#x3C;Form.Message for='name' className=\"error\" />\n\n  &#x3C;Form.Submit type='submit'>Submit&#x3C;/Form.Submit>\n&#x3C;/Form>\n</code></pre>"}},"required":false,"tsType":{"name":"signature","type":"function","raw":"(errors: Errors) => void","signature":{"arguments":[{"name":"errors","type":{"name":"Errors"}}],"return":{"name":"void"}}},"type":{"name":"func","value":null,"raw":null}},{"name":"touched","tags":[],"defaultValue":null,"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"An object hash of field paths and whether they have been \\\"touched\\\" yet\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":"<p>An object hash of field paths and whether they have been \"touched\" yet</p>"}},"required":false,"tsType":{"name":"Touched"},"type":{"name":"object","value":null,"raw":null}},{"name":"onTouch","tags":[],"defaultValue":null,"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Callback that is called when a field is touched. It is called with an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"touched\"), \" object\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":"<p>Callback that is called when a field is touched. It is called with an <code>touched</code> object</p>"}},"required":false,"tsType":{"name":"signature","type":"function","raw":"(touched: Touched, changedPaths: string[]) => void","signature":{"arguments":[{"name":"touched","type":{"name":"Touched"}},{"name":"changedPaths","type":{"name":"Array","elements":[{"name":"string"}],"raw":"string[]"}}],"return":{"name":"void"}}},"type":{"name":"func","value":null,"raw":null}},{"name":"onValidate","tags":[],"defaultValue":null,"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Callback that is called whenever a validation is triggered.\\nIt is called \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"before\"), \" the validation is actually run.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"static\",\n    \"static\": true\n  }), \"function onValidate(event) {\\n  let { type, fields, args } = event\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":"<p>Callback that is called whenever a validation is triggered.\nIt is called <em>before</em> the validation is actually run.</p>\n<pre><code class=\"language-js\" data-meta=\"static\">function onValidate(event) {\n  let { type, fields, args } = event\n}\n</code></pre>"}},"required":false,"tsType":{"name":"signature","type":"function","raw":"(data: ValidateData) => void","signature":{"arguments":[{"name":"data","type":{"name":"ValidateData"}}],"return":{"name":"void"}}},"type":{"name":"func","value":null,"raw":null}},{"name":"onBeforeSubmit","tags":[],"defaultValue":null,"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Callback that is fired in response to a submit, \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"before\"), \" validation runs.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"static\",\n    \"static\": true\n  }), \"function onSubmit(formValue) {\\n  // do something with valid value\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":"<p>Callback that is fired in response to a submit, <em>before</em> validation runs.</p>\n<pre><code class=\"language-js\" data-meta=\"static\">function onSubmit(formValue) {\n  // do something with valid value\n}\n</code></pre>"}},"required":false,"tsType":{"name":"signature","type":"function","raw":"(data: BeforeSubmitData) => void","signature":{"arguments":[{"name":"data","type":{"name":"BeforeSubmitData"}}],"return":{"name":"void"}}},"type":{"name":"func","value":null,"raw":null}},{"name":"onSubmit","tags":[],"defaultValue":null,"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Callback that is fired in response to a submit, after validation runs for the entire form.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"static\",\n    \"static\": true\n  }), \"function onSubmit(formValue) {\\n  // do something with valid value\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":"<p>Callback that is fired in response to a submit, after validation runs for the entire form.</p>\n<pre><code class=\"language-js\" data-meta=\"static\">function onSubmit(formValue) {\n  // do something with valid value\n}\n</code></pre>"}},"required":false,"tsType":{"name":"signature","type":"function","raw":"(validatedValue: InferType<TSchema>) => void","signature":{"arguments":[{"name":"validatedValue","type":{"name":"InferType","elements":[{"name":"TSchema"}],"raw":"InferType<TSchema>"}}],"return":{"name":"void"}}},"type":{"name":"func","value":null,"raw":null}},{"name":"onReset","tags":[],"defaultValue":null,"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Callback that is fired in response to a form reset. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onReset\"), \" fires before\\nthe accompanying \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onChange\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"static\",\n    \"static\": true\n  }), \"function onReset() {\\n  // reset has been called\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":"<p>Callback that is fired in response to a form reset. <code>onReset</code> fires before\nthe accompanying <code>onChange</code>.</p>\n<pre><code class=\"language-js\" data-meta=\"static\">function onReset() {\n  // reset has been called\n}\n</code></pre>"}},"required":false,"tsType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"type":{"name":"func","value":null,"raw":null}},{"name":"onSubmitFinished","tags":[],"defaultValue":null,"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":""}},"required":false,"tsType":{"name":"signature","type":"function","raw":"(error?: Error) => void","signature":{"arguments":[{"name":"error","type":{"name":"Error"}}],"return":{"name":"void"}}},"type":{"name":"func","value":null,"raw":null}},{"name":"submitForm","tags":[],"defaultValue":null,"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":""}},"required":false,"tsType":{"name":"signature","type":"function","raw":"(input: TValue) => Promise<any> | any","signature":{"arguments":[{"name":"input","type":{"name":"TValue"}}],"return":{"name":"union","raw":"Promise<any> | any","elements":[{"name":"Promise","elements":[{"name":"any"}],"raw":"Promise<any>"},{"name":"any"}]}}},"type":{"name":"func","value":null,"raw":null}},{"name":"onInvalidSubmit","tags":[],"defaultValue":null,"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Callback that is fired when the native onSubmit event is triggered. Only relevant when\\nthe \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"component\"), \" prop renders a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<form/>\"), \" tag. onInvalidSubmit will trigger only if the form is invalid.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"static\",\n    \"static\": true\n  }), \"function onInvalidSubmit(errors){\\n  // do something with errors\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":"<p>Callback that is fired when the native onSubmit event is triggered. Only relevant when\nthe <code>component</code> prop renders a <code>&#x3C;form/></code> tag. onInvalidSubmit will trigger only if the form is invalid.</p>\n<pre><code class=\"language-js\" data-meta=\"static\">function onInvalidSubmit(errors){\n  // do something with errors\n}\n</code></pre>"}},"required":false,"tsType":{"name":"signature","type":"function","raw":"(errors: Errors) => void","signature":{"arguments":[{"name":"errors","type":{"name":"Errors"}}],"return":{"name":"void"}}},"type":{"name":"func","value":null,"raw":null}},{"name":"getter","tags":[],"defaultValue":{"value":"formGetter","computed":true},"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A value getter function. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getter\"), \" is called with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"path\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \" and\\nshould return the plain \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"javascript\"), \" value at the path.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"static\",\n    \"static\": true\n  }), \"function(\\n path: string,\\n value: any,\\n): Object\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":"<p>A value getter function. <code>getter</code> is called with <code>path</code> and <code>value</code> and\nshould return the plain <strong>javascript</strong> value at the path.</p>\n<pre><code class=\"language-ts\" data-meta=\"static\">function(\n path: string,\n value: any,\n): Object\n</code></pre>"}},"required":false,"tsType":{"name":"signature","type":"function","raw":"(path: string, value: TValue) => any","signature":{"arguments":[{"name":"path","type":{"name":"string"}},{"name":"value","type":{"name":"TValue"}}],"return":{"name":"any"}}},"type":{"name":"func","value":null,"raw":null}},{"name":"setter","tags":[],"defaultValue":{"value":"formSetter","computed":true},"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A value setter function. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setter\"), \" is called with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"path\"), \", the form \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \" and the path \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \".\\nThe \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setter\"), \" must return updated form \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \", which allows you to leave the original value unmutated.\"), mdx(\"p\", null, \"The default implementation uses the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://facebook.github.io/react/docs/update.html\"\n  }), \"react immutability helpers\"), \",\\nletting you treat the form \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \" as immutable.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"static\",\n    \"static\": true\n  }), \"function(\\n path: string,\\n formValue: any,\\n pathValue: any\\n): Object\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":"<p>A value setter function. <code>setter</code> is called with <code>path</code>, the form <code>value</code> and the path <code>value</code>.\nThe <code>setter</code> must return updated form <code>value</code>, which allows you to leave the original value unmutated.</p>\n<p>The default implementation uses the <a href=\"http://facebook.github.io/react/docs/update.html\">react immutability helpers</a>,\nletting you treat the form <code>value</code> as immutable.</p>\n<pre><code class=\"language-ts\" data-meta=\"static\">function(\n path: string,\n formValue: any,\n pathValue: any\n): Object\n</code></pre>"}},"required":false,"tsType":{"name":"signature","type":"function","raw":"(path: string, value: TValue, fieldValue: any) => TValue","signature":{"arguments":[{"name":"path","type":{"name":"string"}},{"name":"value","type":{"name":"TValue"}},{"name":"fieldValue","type":{"name":"any"}}],"return":{"name":"TValue"}}},"type":{"name":"func","value":null,"raw":null}},{"name":"delay","tags":[],"defaultValue":{"value":"300","computed":false},"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Time in milliseconds that validations should be debounced. Reduces the amount of validation calls\\nmade at the expense of a slight delay. Helpful for performance.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":"<p>Time in milliseconds that validations should be debounced. Reduces the amount of validation calls\nmade at the expense of a slight delay. Helpful for performance.</p>"}},"required":false,"tsType":{"name":"number"},"type":{"name":"number","value":null,"raw":null}},{"name":"strict","tags":[],"defaultValue":{"value":"false","computed":false},"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Validations will be strict, making no attempt to coarce input values to the appropriate type.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":"<p>Validations will be strict, making no attempt to coarce input values to the appropriate type.</p>"}},"required":false,"tsType":{"name":"boolean"},"type":{"name":"bool","value":null,"raw":null}},{"name":"noValidate","tags":[],"defaultValue":null,"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Turns off input validation for the Form, value updates will continue to work.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":"<p>Turns off input validation for the Form, value updates will continue to work.</p>"}},"required":false,"tsType":{"name":"boolean"},"type":{"name":"bool","value":null,"raw":null}},{"name":"as","tags":[],"defaultValue":{"value":"'form'","computed":false},"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A tag name or Component class the Form should render.\"), mdx(\"p\", null, \"If \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \" are \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \" the form will simply render it's child. In\\nthis instance there must only be one child.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":"<p>A tag name or Component class the Form should render.</p>\n<p>If <code>null</code> are <code>false</code> the form will simply render it's child. In\nthis instance there must only be one child.</p>"}},"required":false,"tsType":{"name":"union","raw":"React.ElementType | null | false","elements":[{"name":"ReactElementType","raw":"React.ElementType"},{"name":"null"},{"name":"literal","value":"false"}]},"type":{"name":"union","value":[{"name":"elementType"},{"name":"enum","value":[{"value":"null","computed":false},{"value":"false","computed":false}]}],"raw":null}},{"name":"schema","tags":[{"name":"type","value":"{Schema}"}],"defaultValue":null,"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A Yup schema  that validates the Form \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \" prop. Used to validate the form input values\\nFor more information about the yup api check out: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/jquense/yup/blob/master/README.md\"\n  }), \"https://github.com/jquense/yup/blob/master/README.md\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":"<p>A Yup schema  that validates the Form <code>value</code> prop. Used to validate the form input values\nFor more information about the yup api check out: <a href=\"https://github.com/jquense/yup/blob/master/README.md\">https://github.com/jquense/yup/blob/master/README.md</a></p>"}},"required":false,"tsType":{"name":"TSchema"},"type":{"name":"Schema","value":null,"raw":"(props, name, componentName) {\n  let err: null | Error = null;\n\n  if (props[name]) {\n    if (!isSchema(props[name]))\n      err = new Error(\n        '`schema` must be a proper yup schema: (' + componentName + ')',\n      );\n  }\n\n  return err;\n}"}},{"name":"context","tags":[],"defaultValue":null,"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"yup schema context\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":"<p>yup schema context</p>"}},"required":false,"tsType":{"name":"Record","elements":[{"name":"string"},{"name":"unknown"}],"raw":"Record<string, unknown>"},"type":{"name":"object","value":null,"raw":null}},{"name":"debug","tags":[],"defaultValue":null,"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"toggle debug mode, which \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"console.warn\"), \"s validation errors\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":"<p>toggle debug mode, which <code>console.warn</code>s validation errors</p>"}},"required":false,"tsType":{"name":"boolean"},"type":{"name":"bool","value":null,"raw":null}},{"name":"className","tags":[],"defaultValue":null,"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":""}},"required":false,"tsType":{"name":"string"},"type":{"name":"string","value":null,"raw":null}},{"name":"children","tags":[],"defaultValue":null,"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":""}},"required":false,"tsType":{"name":"ReactReactNode","raw":"React.ReactNode"},"type":{"name":"React.ReactNode","value":null,"raw":null}},{"name":"defaultValue","tags":[],"defaultValue":null,"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":""}},"required":false,"tsType":{"name":"Partial","elements":[{"name":"TValue"}],"raw":"Partial<TValue>"},"type":{"name":"Partial<TValue>","value":null,"raw":null}},{"name":"defaultErrors","tags":[],"defaultValue":{"value":"ErrorUtils.EMPTY_ERRORS","computed":true},"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":""}},"required":false,"tsType":{"name":"Errors"},"type":{"name":"Errors","value":null,"raw":null}},{"name":"defaultTouched","tags":[],"defaultValue":{"value":"{}","computed":false},"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":""}},"required":false,"tsType":{"name":"Touched"},"type":{"name":"Touched","value":null,"raw":null}},{"name":"stripUnknown","tags":[],"defaultValue":null,"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":""}},"required":false,"tsType":{"name":"boolean"},"type":{"name":"boolean","value":null,"raw":null}},{"name":"abortEarly","tags":[],"defaultValue":null,"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Controls how errors are dealt with for field level validation. When\\nset, the first validation error a field throws is returned instead of waiting\\nfor all validations to finish\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":"<p>Controls how errors are dealt with for field level validation. When\nset, the first validation error a field throws is returned instead of waiting\nfor all validations to finish</p>"}},"required":false,"tsType":{"name":"boolean"},"type":{"name":"boolean","value":null,"raw":null}}]}},"pageContext":{"nodeId":"e72e37ea-97e4-5114-80f4-a6b2af23997e","exampleId":"6a0968c7-755e-5bff-9d7c-57c9720910a7"}}}