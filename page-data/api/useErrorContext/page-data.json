{"componentChunkName":"component---node-modules-docpocalypse-gatsby-theme-src-templates-hook-tsx","path":"/api/useErrorContext","result":{"data":{"docpocalypse":{"id":"0c1abe93-16aa-5e70-8234-ba97e3354c8e","tsType":{"id":"9296481c-7f20-51bc-bcf7-51da5de5c14b","name":"useErrorContext","kind":64,"kindString":"Function","flags":{},"signatures":[{"id":"4d2661d2-977f-5c3a-85f3-57539f44c783","name":"useErrorContext","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":"9e6c42a3-0ab0-53f9-8af3-9ef7b875860c","name":"errors","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1062,"name":"Errors","reference":{"id":"863ec728-2f9e-53a7-b409-95bdb80a02f8","name":"Errors","kind":4194304,"kindString":"Type alias","flags":{"isExported":true},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"union","types":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}]}],"name":"Record"},"parent":"532778e0-adce-54c0-b9a2-c3a9e71982e4","rootDir":"/Users/jquense/src/react-formal/src","tsconfig":"/Users/jquense/src/react-formal/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/react-formal/src/types.ts"}},"parent":"4d2661d2-977f-5c3a-85f3-57539f44c783","rootDir":"/Users/jquense/src/react-formal/src","tsconfig":"/Users/jquense/src/react-formal/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":null}],"type":{"type":"union","types":[{"type":"intrinsic","name":"null"},{"type":"reflection","declaration":{"id":"5ac07e9d-6fff-5aa2-b7de-85113aa69dc2","name":"__type","kind":65536,"kindString":"Type literal","flags":{},"parent":"4d2661d2-977f-5c3a-85f3-57539f44c783","rootDir":"/Users/jquense/src/react-formal/src","tsconfig":"/Users/jquense/src/react-formal/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":null}}]},"parent":"9296481c-7f20-51bc-bcf7-51da5de5c14b","rootDir":"/Users/jquense/src/react-formal/src","tsconfig":"/Users/jquense/src/react-formal/tsconfig.json","typedocs":[],"signatures":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/react-formal/src/Form.tsx"}],"parent":"65cd3d07-d0a1-5906-96fd-c0a3ee1d12a1","rootDir":"/Users/jquense/src/react-formal/src","tsconfig":"/Users/jquense/src/react-formal/tsconfig.json","typedocs":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/react-formal/src/Form.tsx"},"type":"hook","name":"useErrorContext","packageName":"react-formal","importName":"import { useErrorContext } from 'react-formal'","tags":[],"example":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"overview\"\n  }, \"Overview\"), mdx(\"p\", null, \"Form component renders a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \" to be updated and validated by child Fields.\\nForms can be thought of as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<input/>\"), \"s for complex values, or models. A Form aggregates\\na bunch of smaller inputs, each in charge of updating a small part of the overall model.\\nThe Form will integrate and validate each change and fire a single unified \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onChange\"), \" with the new \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \".\"), mdx(\"p\", null, \"Validation errors can be displayed anywhere inside a Form with Message Components.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import Form from \\\"@docs/components/FormWithResult\\\";\\nimport * as yup from \\\"yup\\\";\\n\\nconst defaultStr = yup.string().default(\\\"\\\");\\n\\nconst customerSchema = yup.object({\\n  name: yup.object({\\n    first: defaultStr.required(\\\"please enter a first name\\\"),\\n    last: defaultStr.required(\\\"please enter a surname\\\")\\n  }),\\n\\n  dateOfBirth: yup.date().max(new Date(), \\\"Are you a time traveler?!\\\"),\\n\\n  colorId: yup\\n    .number()\\n    .nullable()\\n    .required(\\\"Please select a dank color\\\")\\n});\\n\\n<Form schema={customerSchema} defaultValue={customerSchema.default()}>\\n  <fieldset>\\n    <legend className=\\\"sr-only\\\">name</legend>\\n    <label>\\n      Name\\n      <Form.Field name=\\\"name.first\\\" placeholder=\\\"First name\\\" />\\n    </label>\\n    <label>\\n      Surname\\n      <Form.Field name=\\\"name.last\\\" placeholder=\\\"Surname\\\" />\\n    </label>\\n    <Form.Message for={[\\\"name.first\\\", \\\"name.last\\\"]} className=\\\"error\\\" />\\n  </fieldset>\\n\\n  <label>\\n    Date of Birth\\n    <Form.Field name=\\\"dateOfBirth\\\" />\\n  </label>\\n  <Form.Message for=\\\"dateOfBirth\\\" className=\\\"error\\\" />\\n\\n  <label>\\n    Favorite Color\\n    <Form.Field name=\\\"colorId\\\" as=\\\"select\\\">\\n      <option value={null}>Select a color...</option>\\n      <option value={0}>Red</option>\\n      <option value={1}>Yellow</option>\\n      <option value={2}>Blue</option>\\n      <option value={3}>other</option>\\n    </Form.Field>\\n  </label>\\n  <Form.Message for=\\\"colorId\\\" className=\\\"error\\\" />\\n\\n  <Form.Submit type=\\\"submit\\\">Submit</Form.Submit>\\n</Form>;\\n\")), mdx(\"h2\", {\n    \"id\": \"schema\"\n  }, \"Schema\"), mdx(\"p\", null, \"A schema is not \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"strictly\"), \" required, however describing form data with a schema\\noffers many benefits that make their use worthwhile.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Schema provide an expressive language for describing validation at a\\nfield level as well as form-wide tests.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Schema provide type metadata that React Formal can use to simplify configuration.\\n\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"yup.array()\"), \" fields are automatically render \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<select multiple>\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"yup.boolean()\"), \"s\\nrender checkboxes, and so on\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Schema allow encapsulating server serialization and business logic apart\\nfrom your specific UI. Validation and transformations are not strictly tied to form input\\nlayout or UI means more maintainable, composable, and testable code.\")), mdx(\"h3\", {\n    \"id\": \"field-inference\"\n  }, \"Field Inference\"), mdx(\"p\", null, \"A Field's schema provides runtime type information that can be used to help\\nreduce boilerplate UI code. Field's will render the most appropriate native input\\nfor your field type (you can always override it).\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import Form from \\\"react-formal\\\";\\nimport * as yup from \\\"yup\\\";\\n\\nconst schema = yup.object({\\n  list: yup.array(),\\n  number: yup.number(),\\n  date: yup.date()\\n});\\n\\n<Form schema={schema}>\\n  <label>\\n    A list\\n    <Form.Field name=\\\"list\\\" />\\n  </label>\\n  <label>\\n    A number picker\\n    <Form.Field name=\\\"number\\\" />\\n  </label>\\n  <label>\\n    A date picker\\n    <Form.Field name=\\\"date\\\" />\\n  </label>\\n</Form>;\\n\")), mdx(\"h3\", {\n    \"id\": \"data-serialization\"\n  }, \"Data Serialization\"), mdx(\"p\", null, \"Schema can also do data sanitiation and transformation. When a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Form\"), \" is submitted\\nthe current value is passed through\\nthe schema a final time as a whole, the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"transformed\"), \" value is what is passed back\\nto the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#onSubmit\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"onSubmit\")), \" handlers (you can override this behavior with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"strict\"), \").\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\",\n    \"metastring\": \"renderAsComponent\",\n    \"renderAsComponent\": true\n  }), \"import * as yup from \\\"yup\\\";\\nimport Form from \\\"react-formal\\\";\\nimport Result from \\\"../components/Result\\\";\\n\\nconst [submittedValue, setSubmittedValue] = useState({});\\nconst schema = yup.object({\\n  slug: yup\\n    .string()\\n    .lowercase()\\n    .transform(value =>\\n      value\\n        .replace(/not/g, \\\"\\\")\\n        .trim()\\n        .replace(/\\\\s+/g, \\\"-\\\")\\n    )\\n});\\n\\n<Form\\n  schema={schema}\\n  defaultValue={{ slug: \\\"Not a Good Slug\\\" }}\\n  onSubmit={setSubmittedValue}\\n  className=\\\"lg:flex\\\"\\n>\\n  <div className=\\\"lg:flex-2\\\">\\n    <label>\\n      Slug (submit to see result)\\n      <Form.Field name=\\\"slug\\\" readOnly />\\n    </label>\\n    <Form.Submit type=\\\"submit\\\">Submit</Form.Submit>\\n  </div>\\n  <Result value={submittedValue} className=\\\"lg:ml-4 lg:mt-0\\\" />\\n</Form>;\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"signatures":[]}},"pageContext":{"nodeId":"0c1abe93-16aa-5e70-8234-ba97e3354c8e","exampleId":"6a0968c7-755e-5bff-9d7c-57c9720910a7"}}}