{"version":3,"sources":["webpack:///./src/pages/migration-v2.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-migration-v-2-mdx-274aba37ffe2f1c0e656.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/jquense/src/react-formal/www/node_modules/@docpocalypse/gatsby-theme/src/components/PageLayout.tsx\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"migration-to-v2\"\n    }}>{`Migration to v2`}</h1>\n    <p>{`Version 2.0.0 focuses on adding robust hooks support as well as streamlining the public\nAPI towards simplicity and consistency. It also adds first class TypeScript support!`}</p>\n    <h2 {...{\n      \"id\": \"key-features\"\n    }}>{`Key Features`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`New hooks for custom fields and common use-cases makes accessing Form data significantly easier`}<ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`useFormValue`}</inlineCode></li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`useField`}</inlineCode></li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`useFieldArray`}</inlineCode></li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`useFormSubmit`}</inlineCode></li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`useErrors`}</inlineCode></li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`useTouched`}</inlineCode></li>\n        </ul></li>\n      <li parentName=\"ul\">{`Out-of-the-box support for `}<inlineCode parentName=\"li\">{`<select multiple>`}</inlineCode>{` as well as checkbox groups`}</li>\n      <li parentName=\"ul\">{`Better `}<inlineCode parentName=\"li\">{`FieldArray`}</inlineCode>{` validation behavior; arrayHelpers only trigger validation on the list itself, not nested fields`}</li>\n      <li parentName=\"ul\">{`Library is now written in TypeScript.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"breaking-changes\"\n    }}>{`Breaking Changes`}</h2>\n    <p>{`There is lot of rewritten code, so there may be subtle changes that I've missed. Please\ntest in your apps thoroughly.`}</p>\n    <h3 {...{\n      \"id\": \"package-exports-have-been-rearranged\"\n    }}>{`Package exports have been rearranged`}</h3>\n    <p>{`Previously, most library components and utils were exported as static properties\nof the `}<inlineCode parentName=\"p\">{`<Form>`}</inlineCode>{` component as well as being named exports from the package. For\nESM consumers the default export is the `}<inlineCode parentName=\"p\">{`<Form>`}</inlineCode>{` component and\nthe `}<inlineCode parentName=\"p\">{`<Field>`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`<FieldArray>`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`<Message>`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`<Submit>`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`<Summary>`}</inlineCode>{` components\nare still static properties of Form:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"static\",\n        \"static\": true\n      }}>{`import Form from 'react-formal';\n\n<Form>\n  <Form.Field />\n</Form>;\n`}</code></pre>\n    <p>{`Every thing else is exported as a named export including an object called `}<inlineCode parentName=\"p\">{`formStatics`}</inlineCode>{`\nwhich is all the static properties on Form.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"static\",\n        \"static\": true\n      }}>{`import { useField, setter, toFormErrors } from 'react-formal';\n`}</code></pre>\n    <p>{`For CommonJS consumers the import is the Form component with all other exports as static properties.`}</p>\n    <h3 {...{\n      \"id\": \"field-render-prop-arguments\"\n    }}>{`Field render prop arguments`}</h3>\n    <p>{`Instead of passing a single `}<inlineCode parentName=\"p\">{`props`}</inlineCode>{` argument and the resolved Input, Field and FieldArrays\nnow pass props and `}<inlineCode parentName=\"p\">{`meta`}</inlineCode>{` as seperate arguments. The resolved input has been removed\nentirely as it was unnecessary for custom components. For details about how fields\nresolve to `}<em parentName=\"p\">{`native`}</em>{` elements field `}<inlineCode parentName=\"p\">{`meta`}</inlineCode>{` now contains `}<inlineCode parentName=\"p\">{`nativeTagName`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`nativeType`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"static\",\n        \"static\": true\n      }}>{`<Form.Field name=\"birthDate\">\n  {(props, meta) => <DatePicker {...props} />}\n</Form.Field>\n`}</code></pre>\n    <p>{`For very custom `}<inlineCode parentName=\"p\">{`Field`}</inlineCode>{` components consider `}<inlineCode parentName=\"p\">{`useField`}</inlineCode>{` and friends.`}</p>\n    <h3 {...{\n      \"id\": \"change-events---validateon\"\n    }}>{`Change: `}<inlineCode parentName=\"h3\">{`events`}</inlineCode>{` -> `}<inlineCode parentName=\"h3\">{`validateOn`}</inlineCode></h3>\n    <p>{`The validation `}<inlineCode parentName=\"p\">{`events`}</inlineCode>{` prop has been changed to `}<inlineCode parentName=\"p\">{`validateOn`}</inlineCode>{` and limited to only `}<inlineCode parentName=\"p\">{`change`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`blur`}</inlineCode>{`.\nArbitrary events cannot be configured any longer. To support other sorts of event\nhandlers use the Field render prop.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Field>\n  {({ onBlur, ...pros }) => <MyInput onValidate={onBlur} {...props} />}\n</Field>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"fields-always-inject-onchange\"\n    }}>{`Field's `}<em parentName=\"h3\">{`always`}</em>{` inject `}<inlineCode parentName=\"h3\">{`onChange`}</inlineCode></h3>\n    <p>{`Previously Fields would only inject handlers for their configured `}<inlineCode parentName=\"p\">{`events`}</inlineCode>{`. This\nmeant that when set to `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{` a Field could not trigger updates. This has been fixed, so\n`}<inlineCode parentName=\"p\">{`events`}</inlineCode>{` (now `}<inlineCode parentName=\"p\">{`validateOn`}</inlineCode>{`) now refer exclusively to handlers `}<em parentName=\"p\">{`that trigger validation`}</em>{` and `}<inlineCode parentName=\"p\">{`onChange`}</inlineCode>{` is always\ninjected, even when events is `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{`.`}</p>\n    <p>{`Note that `}<inlineCode parentName=\"p\">{`onChange`}</inlineCode>{` can still trigger validation, e.g.\n`}<inlineCode parentName=\"p\">{`validateOn=\"change\"`}</inlineCode>{` will inject an `}<inlineCode parentName=\"p\">{`onChange`}</inlineCode>{` handler that triggers an update as well as validation,\n`}<inlineCode parentName=\"p\">{`validateOn={null}`}</inlineCode>{` will still inject `}<inlineCode parentName=\"p\">{`onChange`}</inlineCode>{` but it will `}<em parentName=\"p\">{`only`}</em>{` trigger an update\nto the field value, not validation.`}</p>\n    <h3 {...{\n      \"id\": \"fieldarray-render-prop-arguments\"\n    }}>{`FieldArray render prop arguments`}</h3>\n    <p><inlineCode parentName=\"p\">{`<FieldArray>`}</inlineCode>{` have switched to be entirely non-presentational components. Meaning,\nthey no longer accept an `}<inlineCode parentName=\"p\">{`as`}</inlineCode>{` prop or element `}<inlineCode parentName=\"p\">{`children`}</inlineCode>{`. It's generally recommended\nthat FieldArray be used to compose other `}<inlineCode parentName=\"p\">{`Field`}</inlineCode>{`s via the render prop (but not required).`}</p>\n    <p>{`For uses existing renderProp usage the arguments are now:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"static\",\n        \"static\": true\n      }}>{`<Form.FieldArray>\n  {(values, arrayHelpers, meta) => ... }\n</Form.FieldArray>\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`useFieldArray`}</inlineCode>{` is also now available as an alternative to render props.`}</p>\n    <h4 {...{\n      \"id\": \"migrating-fieldarray-components\"\n    }}>{`Migrating FieldArray Components`}</h4>\n    <p>{`This is likely an uncommon pattern, but Field Arrays like the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Form.FieldArray as={MyListComponent} />\n`}</code></pre>\n    <p>{`Will no longer work, instead switch to the render prop and pass the helpers and values\nin as props to your component, or take ad avantage of `}<inlineCode parentName=\"p\">{`useFieldArray`}</inlineCode>{` in MyListComponent.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Form.FieldArray>\n  {(values, arrayHelpers, meta) => (\n    <MyListComponent values={values} helpers={arrayHelpers} meta={meta} />\n  )}\n</Form.FieldArray>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"fieldarray-validation\"\n    }}>{`FieldArray validation`}</h3>\n    <p>{`Previously, `}<inlineCode parentName=\"p\">{`<FieldArray>`}</inlineCode>{`s would trigger validation the same as `}<inlineCode parentName=\"p\">{`<Field>`}</inlineCode>{`s, validating\nthe entire branch below their `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{`. Now validation is `}<em parentName=\"p\">{`only`}</em>{` triggered for the list itself.\nPractically this means that it's no longer required to set `}<inlineCode parentName=\"p\">{`events={null}`}</inlineCode>{` on FieldArrays as a well\nof disabling top level validation.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}