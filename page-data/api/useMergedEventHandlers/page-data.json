{"componentChunkName":"component---node-modules-docpocalypse-gatsby-theme-src-templates-hook-tsx","path":"/api/useMergedEventHandlers","result":{"data":{"docpocalypse":{"id":"9f1d26be-acdb-5db3-8652-6f5dde6c7f9e","tsType":{"id":"313e9423-3d65-5d93-bc4b-b53aba0f40b2","name":"useMergedEventHandlers","kind":64,"kindString":"Function","flags":{"isExported":true},"signatures":[{"id":"a00f06ab-da6e-5eb9-a4b3-9e96d50cbacb","name":"useMergedEventHandlers","kind":4096,"kindString":"Call signature","flags":{"isExported":true},"parameters":[{"id":"1fa57209-d446-5d65-a559-c04284e82849","name":"__namedParameters","kind":32768,"kindString":"Parameter","flags":{"isExported":true},"originalName":"__0","type":{"type":"reflection","declaration":{"id":"9c820ed2-3e4b-5397-9c00-266d12b00fc9","name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExported":true},"groups":[{"title":"Variables","kind":32,"children":["ba8d1a45-5fcd-5c90-9f0d-4269b213c25b","f4d7d0bb-af42-572c-b36c-844304019f87"]}],"parent":"1fa57209-d446-5d65-a559-c04284e82849","rootDir":"/Users/jquense/src/react-formal/src","tsconfig":"/Users/jquense/src/react-formal/tsconfig.json","typedocs":[{"id":"ba8d1a45-5fcd-5c90-9f0d-4269b213c25b","name":"onFieldBlur","kind":32,"kindString":"Variable","flags":{"isExported":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"reflection","declaration":{"id":"caba4b09-d29c-57df-add1-e74badd1e851","name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExported":true},"signatures":[{"id":"e32919b1-ccc9-51b2-80d6-62c0c8c7aeff","name":"__call","kind":4096,"kindString":"Call signature","flags":{"isExported":true},"parameters":[{"id":"ee11a19d-7dec-53a6-9a52-e2ad8740896b","name":"args","kind":32768,"kindString":"Parameter","flags":{"isExported":true,"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"any"}},"parent":"e32919b1-ccc9-51b2-80d6-62c0c8c7aeff","rootDir":"/Users/jquense/src/react-formal/src","tsconfig":"/Users/jquense/src/react-formal/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":null}],"type":{"type":"intrinsic","name":"any"},"parent":"caba4b09-d29c-57df-add1-e74badd1e851","rootDir":"/Users/jquense/src/react-formal/src","tsconfig":"/Users/jquense/src/react-formal/tsconfig.json","typedocs":[],"signatures":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/react-formal/src/Field.tsx"}],"parent":"ba8d1a45-5fcd-5c90-9f0d-4269b213c25b","rootDir":"/Users/jquense/src/react-formal/src","tsconfig":"/Users/jquense/src/react-formal/tsconfig.json","typedocs":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":null}}]},"parent":"9c820ed2-3e4b-5397-9c00-266d12b00fc9","rootDir":"/Users/jquense/src/react-formal/src","tsconfig":"/Users/jquense/src/react-formal/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/react-formal/src/Field.tsx"},{"id":"f4d7d0bb-af42-572c-b36c-844304019f87","name":"onFieldChange","kind":32,"kindString":"Variable","flags":{"isExported":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"reflection","declaration":{"id":"14db0e4a-c692-547c-96ec-a1651c0bd5b9","name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExported":true},"signatures":[{"id":"5a7dff1c-ca62-5631-88d7-1c966d17dc90","name":"__call","kind":4096,"kindString":"Call signature","flags":{"isExported":true},"parameters":[{"id":"daab2b82-091f-5ee4-8309-e8428aad278f","name":"args","kind":32768,"kindString":"Parameter","flags":{"isExported":true,"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"any"}},"parent":"5a7dff1c-ca62-5631-88d7-1c966d17dc90","rootDir":"/Users/jquense/src/react-formal/src","tsconfig":"/Users/jquense/src/react-formal/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":null}],"type":{"type":"intrinsic","name":"any"},"parent":"14db0e4a-c692-547c-96ec-a1651c0bd5b9","rootDir":"/Users/jquense/src/react-formal/src","tsconfig":"/Users/jquense/src/react-formal/tsconfig.json","typedocs":[],"signatures":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/react-formal/src/Field.tsx"}],"parent":"f4d7d0bb-af42-572c-b36c-844304019f87","rootDir":"/Users/jquense/src/react-formal/src","tsconfig":"/Users/jquense/src/react-formal/tsconfig.json","typedocs":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":null}}]},"parent":"9c820ed2-3e4b-5397-9c00-266d12b00fc9","rootDir":"/Users/jquense/src/react-formal/src","tsconfig":"/Users/jquense/src/react-formal/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/react-formal/src/Field.tsx"}],"signatures":[],"parameters":[],"typeParameter":[],"absolutePath":"/Users/jquense/src/react-formal/src/Field.tsx"}},"parent":"a00f06ab-da6e-5eb9-a4b3-9e96d50cbacb","rootDir":"/Users/jquense/src/react-formal/src","tsconfig":"/Users/jquense/src/react-formal/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":null},{"id":"b620adca-79c0-5e8b-8323-7f6b16e35b28","name":"__namedParameters","kind":32768,"kindString":"Parameter","flags":{"isExported":true},"originalName":"__1","type":{"type":"reflection","declaration":{"id":"a7e6d4c8-6f74-5ef4-aaaf-d59764a94587","name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExported":true},"groups":[{"title":"Variables","kind":32,"children":["77616272-cef5-5b2c-9de2-ece237396597","107d5a33-388a-5e03-b986-f312de98a4c6"]}],"parent":"b620adca-79c0-5e8b-8323-7f6b16e35b28","rootDir":"/Users/jquense/src/react-formal/src","tsconfig":"/Users/jquense/src/react-formal/tsconfig.json","typedocs":[{"id":"77616272-cef5-5b2c-9de2-ece237396597","name":"onBlur","kind":32,"kindString":"Variable","flags":{"isExported":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"reflection","declaration":{"id":"758a08ac-870b-58b0-aa09-86c410658964","name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExported":true},"signatures":[{"id":"ba2320c9-61b4-5a55-b03f-535fcaba91b1","name":"__call","kind":4096,"kindString":"Call signature","flags":{"isExported":true},"parameters":[{"id":"07deec67-1825-5d9f-bfa0-c914030bb0af","name":"args","kind":32768,"kindString":"Parameter","flags":{"isExported":true,"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"any"}},"parent":"ba2320c9-61b4-5a55-b03f-535fcaba91b1","rootDir":"/Users/jquense/src/react-formal/src","tsconfig":"/Users/jquense/src/react-formal/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":null}],"type":{"type":"intrinsic","name":"any"},"parent":"758a08ac-870b-58b0-aa09-86c410658964","rootDir":"/Users/jquense/src/react-formal/src","tsconfig":"/Users/jquense/src/react-formal/tsconfig.json","typedocs":[],"signatures":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/react-formal/src/Field.tsx"}],"parent":"77616272-cef5-5b2c-9de2-ece237396597","rootDir":"/Users/jquense/src/react-formal/src","tsconfig":"/Users/jquense/src/react-formal/tsconfig.json","typedocs":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":null}}]},"parent":"a7e6d4c8-6f74-5ef4-aaaf-d59764a94587","rootDir":"/Users/jquense/src/react-formal/src","tsconfig":"/Users/jquense/src/react-formal/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/react-formal/src/Field.tsx"},{"id":"107d5a33-388a-5e03-b986-f312de98a4c6","name":"onChange","kind":32,"kindString":"Variable","flags":{"isExported":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"reflection","declaration":{"id":"eb8f0e3e-87d8-5417-9b64-0efd5d3c4d15","name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExported":true},"signatures":[{"id":"c619abc2-7a9d-57eb-a91d-85fc7ffc481d","name":"__call","kind":4096,"kindString":"Call signature","flags":{"isExported":true},"parameters":[{"id":"34243257-2120-5fd4-a99c-6d2598f463ed","name":"args","kind":32768,"kindString":"Parameter","flags":{"isExported":true,"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"any"}},"parent":"c619abc2-7a9d-57eb-a91d-85fc7ffc481d","rootDir":"/Users/jquense/src/react-formal/src","tsconfig":"/Users/jquense/src/react-formal/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":null}],"type":{"type":"intrinsic","name":"any"},"parent":"eb8f0e3e-87d8-5417-9b64-0efd5d3c4d15","rootDir":"/Users/jquense/src/react-formal/src","tsconfig":"/Users/jquense/src/react-formal/tsconfig.json","typedocs":[],"signatures":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/react-formal/src/Field.tsx"}],"parent":"107d5a33-388a-5e03-b986-f312de98a4c6","rootDir":"/Users/jquense/src/react-formal/src","tsconfig":"/Users/jquense/src/react-formal/tsconfig.json","typedocs":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":null}}]},"parent":"a7e6d4c8-6f74-5ef4-aaaf-d59764a94587","rootDir":"/Users/jquense/src/react-formal/src","tsconfig":"/Users/jquense/src/react-formal/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/react-formal/src/Field.tsx"}],"signatures":[],"parameters":[],"typeParameter":[],"absolutePath":"/Users/jquense/src/react-formal/src/Field.tsx"}},"parent":"a00f06ab-da6e-5eb9-a4b3-9e96d50cbacb","rootDir":"/Users/jquense/src/react-formal/src","tsconfig":"/Users/jquense/src/react-formal/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":null}],"type":{"type":"reflection","declaration":{"id":"e16c340e-63b9-517b-b612-339fcbfa3ffe","name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExported":true},"groups":[{"title":"Functions","kind":64,"children":["b0e8f002-c5e4-5e85-a460-c17870c5e5ae","efc0c801-69ee-56ad-bd4f-69b68546f766"]}],"parent":"a00f06ab-da6e-5eb9-a4b3-9e96d50cbacb","rootDir":"/Users/jquense/src/react-formal/src","tsconfig":"/Users/jquense/src/react-formal/tsconfig.json","typedocs":[{"id":"b0e8f002-c5e4-5e85-a460-c17870c5e5ae","name":"onBlur","kind":64,"kindString":"Function","flags":{"isExported":true},"signatures":[{"id":"d7c719d2-7f23-54b9-9ac2-9b3119665e5c","name":"onBlur","kind":4096,"kindString":"Call signature","flags":{"isExported":true},"parameters":[{"id":"725cb1ee-13d9-59d2-a887-28ae3fde6d9f","name":"args","kind":32768,"kindString":"Parameter","flags":{"isExported":true,"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"any"}},"parent":"d7c719d2-7f23-54b9-9ac2-9b3119665e5c","rootDir":"/Users/jquense/src/react-formal/src","tsconfig":"/Users/jquense/src/react-formal/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":null}],"type":{"type":"intrinsic","name":"void"},"parent":"b0e8f002-c5e4-5e85-a460-c17870c5e5ae","rootDir":"/Users/jquense/src/react-formal/src","tsconfig":"/Users/jquense/src/react-formal/tsconfig.json","typedocs":[],"signatures":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/react-formal/src/Field.tsx"}],"parent":"e16c340e-63b9-517b-b612-339fcbfa3ffe","rootDir":"/Users/jquense/src/react-formal/src","tsconfig":"/Users/jquense/src/react-formal/tsconfig.json","typedocs":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/react-formal/src/Field.tsx"},{"id":"efc0c801-69ee-56ad-bd4f-69b68546f766","name":"onChange","kind":64,"kindString":"Function","flags":{"isExported":true},"signatures":[{"id":"168eb785-b6dd-5486-9c85-174caf7d5e32","name":"onChange","kind":4096,"kindString":"Call signature","flags":{"isExported":true},"parameters":[{"id":"9a8b1418-33d2-50a2-b132-36f17a89e1df","name":"args","kind":32768,"kindString":"Parameter","flags":{"isExported":true,"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"any"}},"parent":"168eb785-b6dd-5486-9c85-174caf7d5e32","rootDir":"/Users/jquense/src/react-formal/src","tsconfig":"/Users/jquense/src/react-formal/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":null}],"type":{"type":"intrinsic","name":"void"},"parent":"efc0c801-69ee-56ad-bd4f-69b68546f766","rootDir":"/Users/jquense/src/react-formal/src","tsconfig":"/Users/jquense/src/react-formal/tsconfig.json","typedocs":[],"signatures":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/react-formal/src/Field.tsx"}],"parent":"e16c340e-63b9-517b-b612-339fcbfa3ffe","rootDir":"/Users/jquense/src/react-formal/src","tsconfig":"/Users/jquense/src/react-formal/tsconfig.json","typedocs":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/react-formal/src/Field.tsx"}],"signatures":[],"parameters":[],"typeParameter":[],"absolutePath":null}},"parent":"313e9423-3d65-5d93-bc4b-b53aba0f40b2","rootDir":"/Users/jquense/src/react-formal/src","tsconfig":"/Users/jquense/src/react-formal/tsconfig.json","typedocs":[],"signatures":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/react-formal/src/Field.tsx"}],"parent":"af27b71f-2521-5b2b-b80c-4c7df119d4ba","rootDir":"/Users/jquense/src/react-formal/src","tsconfig":"/Users/jquense/src/react-formal/tsconfig.json","typedocs":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/react-formal/src/Field.tsx"},"type":"hook","name":"useMergedEventHandlers","packageName":"react-formal","importName":"import { useMergedEventHandlers } from 'react-formal'","tags":[],"example":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The Field Component renders a form control and handles input value updates and validations.\\nChanges to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Field>\"), \" value are automatically propagated back up to the containing Form\\nComponent.\"), mdx(\"h2\", {\n    \"id\": \"overview\"\n  }, \"Overview\"), mdx(\"p\", null, \"In the simplest cases \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Field>\"), \"s provide a light abstraction over normal input components. Fields\\nshouls provide a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"name\"), \" mapping the input to a branch of the central form data.\\nProviding values and onChange handlers is taken take care of, as well as basic\\nvalue coalescing for multiple selects and checkbox groups.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import Form from \\\"@docs/components/FormWithResult\\\";\\n\\n<Form\\n  defaultValue={{\\n    name: { first: \\\"Sally\\\" },\\n    colors: [\\\"red\\\"]\\n  }}\\n>\\n  <label>\\n    Name\\n    <Form.Field name=\\\"name.first\\\" placeholder=\\\"First name\\\" />\\n  </label>\\n  <label>\\n    Favorite Colors <small>(ctrl/cmd click to select multiple)</small>\\n    <Form.Field as=\\\"select\\\" multiple name=\\\"colors\\\">\\n      <option value=\\\"red\\\">Red</option>\\n      <option value=\\\"yellow\\\">Yellow</option>\\n      <option value=\\\"blue\\\">Blue</option>\\n      <option value=\\\"\\\">Other</option>\\n    </Form.Field>\\n  </label>\\n</Form>;\\n\")), mdx(\"p\", null, \"You can manually control the type and sort of input via the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"as\"), \" prop (for textareas and selects),\\nand the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"type\"), \" prop for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"inputs\"), \" same as with plain HTML inputs. Fields always\\nprovide \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onChange\"), \" props to their inputs.\"), mdx(\"h2\", {\n    \"id\": \"checkbox-and-radios\"\n  }, \"Checkbox and Radios\"), mdx(\"p\", null, \"Create a unified set of checkbox/radio input's that map to a single form field\\nby using multiple \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Field>\"), \"s with the same \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"name\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import Form from \\\"@docs/components/FormWithResult\\\";\\n\\n<Form defaultValue={{ color: \\\"red\\\" }}>\\n  <fieldset>\\n    <legend>Favorite Color</legend>\\n    <label>\\n      <Form.Field type=\\\"radio\\\" name=\\\"color\\\" value=\\\"red\\\" /> Red\\n    </label>\\n    <label>\\n      <Form.Field type=\\\"radio\\\" name=\\\"color\\\" value=\\\"blue\\\" /> Blue\\n    </label>\\n    <label>\\n      <Form.Field type=\\\"radio\\\" name=\\\"color\\\" value=\\\"yellow\\\" /> Yellow\\n    </label>\\n    <label>\\n      <Form.Field type=\\\"radio\\\" name=\\\"color\\\" value=\\\"orange\\\" /> Orange\\n    </label>\\n  </fieldset>\\n</Form>;\\n\")), mdx(\"p\", null, \"Use groups of checkboxes to represent list values. React Formal will intelligently\\ninsert or remove items if the current field value is an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"array\"), \" or, absent a\\nvalue, the schema for the field is a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yup.array()\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import Form from \\\"@docs/components/FormWithResult\\\";\\n\\n<Form\\n  defaultValue={{\\n    colors: [\\\"red\\\"]\\n  }}\\n>\\n  <fieldset>\\n    <legend>Favorite Colors</legend>\\n    <label>\\n      <Form.Field type=\\\"checkbox\\\" name=\\\"colors\\\" value=\\\"red\\\" /> Red\\n    </label>\\n    <label>\\n      <Form.Field type=\\\"checkbox\\\" name=\\\"colors\\\" value=\\\"blue\\\" /> Blue\\n    </label>\\n    <label>\\n      <Form.Field type=\\\"checkbox\\\" name=\\\"colors\\\" value=\\\"yellow\\\" />{\\\" \\\"}\\n      Yellow\\n    </label>\\n    <label>\\n      <Form.Field type=\\\"checkbox\\\" name=\\\"colors\\\" value=\\\"orange\\\" />{\\\" \\\"}\\n      Orange\\n    </label>\\n  </fieldset>\\n</Form>;\\n\")), mdx(\"h2\", {\n    \"id\": \"custom-components\"\n  }, \"Custom components\"), mdx(\"p\", null, \"Fields are not limited to native input components. You can pass \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"any\"), \" component\\ntype to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"as\"), \". The only required interface a component needs to respect is the\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \"/\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onChange\"), \" pattern for controlled fields.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"previewClassName=reset\",\n    \"previewClassName\": \"reset\"\n  }), \"import Form from \\\"../components/FormWithResult\\\";\\n\\nimport DropdownList from \\\"react-widgets/lib/DropdownList\\\";\\n\\n<Form defaultValue={{ color: \\\"red\\\" }}>\\n  <label>\\n    Favorite Colors\\n    <Form.Field\\n      name=\\\"color\\\"\\n      as={DropdownList}\\n      data={[\\\"Red\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Other\\\"]}\\n    />\\n  </label>\\n</Form>;\\n\")), mdx(\"p\", null, \"For a better typed experience with TypeScript, consider using the\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#children\"\n  }), \"render prop API instead\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"static\",\n    \"static\": true\n  }), \"import Form from \\\"../components/FormWithResult\\\";\\n\\nimport DropdownList from \\\"react-widgets/lib/DropdownList\\\";\\n\\n<Form defaultValue={{ color: \\\"red\\\" }}>\\n  <label>\\n    Favorite Colors\\n    <Form.Field name=\\\"color\\\">\\n      {props => (\\n        <DropdownList\\n          data={[\\\"Red\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Other\\\"]}\\n          {...props}\\n        />\\n      )}\\n    </Form.Field>\\n  </label>\\n</Form>;\\n\")), mdx(\"p\", null, \"In addition to injecting \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Field>\"), \" components with events and the field \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \", a\\nspecial prop called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"meta\"), \" is also provided to all Field renderer components. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"meta\"), \"\\ncontains helpful context and methods for doing manual field operations.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"static\",\n    \"static\": true\n  }), \"interface FieldMeta {\\n  value:    any;              // the Field Value\\n  valid:    boolean;          // Whether the field is currently valid\\n  invalid:  boolean;          // inverse of valid\\n  touched:  boolean:          // whether the field has been touched yet\\n  errors:   Errors;           // the errors for this field\\n  schema?:  YupSchema;        // the schema for this field\\n  context?: Record<string, any>; // a yup context object\\n\\n  nativeTagName: 'input' | 'select'; // The inferred native HTML element.\\n  nativeType: string; // The inferred HTML input type, only valid for 'input's\\n\\n  // onError allows manually _replacing_ errors for the Field `name`\\n  // any existing errors for this path will be removed first\\n  onError(errors: Errors): void\\n  // The same callback passed to field components\\n  // for updating (and validating) a field value\\n  onChange(nextFieldValue: any): void\\n\\n\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"validation\"\n  }, \"Validation\"), mdx(\"p\", null, \"Field validation is automatically enabled for Fields with cooresponding Form schema.\\nFields inject \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onChange\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onBlur\"), \" handlers to fire a validation.\\nField validation is debounced (see \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"'/api/Form#delay'\"\n  }), \"Form delay\"), \") to reduce unnecessary\\nchecks while the user is still engaging with the input. Validation can be\\ndisabled per field with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"noValidate\"), \" prop.\"), mdx(\"h3\", {\n    \"id\": \"trigger-events\"\n  }, \"Trigger Events\"), mdx(\"p\", null, \"Validation trigger events can be finely controlled via the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#validateOn\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"validateOn\")), \" prop.\\nEvents control which handlers \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Field>\"), \" passes to the input it renders. Multiple triggers\\ncan be configured using an object configuration.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\"\n  }), \"import * as yup from \\\"yup\\\";\\nimport Form from \\\"react-formal\\\";\\n\\nconst schema = yup.object({\\n  name: yup\\n    .string()\\n    .required()\\n    .min(4)\\n});\\n\\n<>\\n  <Form schema={schema}>\\n    <label>\\n      Validates onBlur\\n      <Form.Field name=\\\"name\\\" validateOn=\\\"blur\\\" />\\n    </label>\\n    <Form.Message for=\\\"name\\\" className=\\\"error\\\" />\\n  </Form>\\n  <Form schema={schema}>\\n    <label>\\n      Validates onBlur and onChange\\n      <Form.Field\\n        name=\\\"name\\\"\\n        validateOn={{ change: true, blur: true }}\\n      />\\n    </label>\\n    <Form.Message for=\\\"name\\\" className=\\\"error\\\" />\\n  </Form>\\n</>;\\n\")), mdx(\"p\", null, \"For more complex situations \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"validateOn\"), \" accepts a function that is based the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"meta\"), \" for the field\\nand can conditionally return events based on context.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\"\n  }), \"import * as yup from \\\"yup\\\";\\nimport Form from \\\"react-formal\\\";\\n\\nconst schema = yup.object({\\n  email: yup\\n    .string()\\n    .email(\\\"Emails must contain an @ and a domain\\\")\\n    .required(\\\"Required\\\")\\n});\\n\\n// Only run validation onChange when the form is invalid\\nconst onBlurThenChangeAndBlur = meta => ({\\n  change: !meta.valid,\\n  blur: true\\n});\\n\\n<Form schema={schema}>\\n  <label>\\n    Enter an Email\\n    <Form.Field name=\\\"email\\\" validateOn={onBlurThenChangeAndBlur} />\\n  </label>\\n  <Form.Message for=\\\"email\\\" className=\\\"error\\\" />\\n</Form>;\\n\")), mdx(\"h3\", {\n    \"id\": \"preset-strategies\"\n  }, \"Preset Strategies\"), mdx(\"p\", null, \"As a convenience React Formal exports a few common trigger configurations\\nyou can mix and match if that is helpful.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"static\",\n    \"static\": true\n  }), \"import { ValidateStrategies } from \\\"react-formal\\\";\\n\\nconst {\\n  Change,\\n  Blur,\\n  ChangeAndBlur,\\n  BlurThenChangeAndBlur\\n} = ValidateStrategies;\\n\\n<Form schema={schema}>\\n  <label>\\n    Email\\n    <Form.Field name=\\\"email\\\" validateOn={Blur} />\\n  </label>\\n  <Form.Message for=\\\"email\\\" className=\\\"error\\\" />\\n</Form>;\\n\")), mdx(\"p\", null, \"There is nothing special about these strategies, and you can roll your own easily.\\nThese are provied as a small convenience.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"signatures":[]}},"pageContext":{"nodeId":"9f1d26be-acdb-5db3-8652-6f5dde6c7f9e","exampleId":"ee4266c0-1af4-5c5f-aa8d-df323105a5a0"}}}